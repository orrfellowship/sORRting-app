{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/worker.js","webpack:///./src/schedule.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","self","importScripts","Schedule","require","resetCompanies","companies","_","each","company","percentageOfMax","companyScore","adjScore","topPreferences","resetCandidates","candidates","candidate","count","repeats","trimName","index","schedule","length","calculateMaxScore","maxScore","counter","preferences","findWhere","determineDecemberGrad","trim","indexOf","decGrad","pos","slice","str","findChar","addDecemberGradTag","objectList","origString","concat","addTag","listToBeTagged","shouldBeTaggedList","strToAdd","taggedList","contains","push","getDecemberGradNames","listOfObjects","finalList","onmessage","msg","data","aTopic","dec","TextDecoder","iterations","slots","candidate_slots","maxConsecutive","companyList","finalCompanyList","newCompany","exceptionList","companyExceptionList","exceptions","processCompanyExceptions","initiateCompanies","Array","initiateCandidates","scoreObject","score","decGradCandidateNames","map","row","interviews","postMessage","enc","TextEncoder","dataObj","avgPercent","arrBuf","encode","JSON","stringify","buffer","aBuf","close","main","parse","decode","newCompanies","newCandidates","bestSchedule","populateCandidates","this","companyIndexes","shuffle","range","slotIndexes","finished","breakout","scheduleIndex","companyIndex","slotIndex","isEmpty","scheduleCandidate","preferenceOrder","isValidAssignment","repeatCheck","companyName","array","tempArray","tempList","highestRepeat","repeatCount","deepCopyArrayOfObjects","arrayOfObjects","arrayCopy","iter","objectCopy","constructor","totalScore","totalPercentage","totalAdjScore","current","slot","Number","toFixed","originalCandidates","remaining","splice","validateInterviewCounts"],"mappings":"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","file":"f1ef333dc0229067a66e.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","self.importScripts('https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js');\nvar Schedule = require('./schedule');\n\nself.onmessage = function (msg) {\n  switch (msg.data.aTopic) {\n    case 'load':\n      var dec = new TextDecoder();\n      var data = JSON.parse(dec.decode(msg.data.aBuf));\n      main(data)\n      break;\n    case 'populate':\n      var dec = new TextDecoder();\n      var data = JSON.parse(dec.decode(msg.data.aBuf));\n      populateCandidates(data);\n      break;\n    default:\n      throw 'no aTopic on incoming message to ChromeWorker';\n  }\n}\n\nfunction main({iterations, companies, candidates, slots, candidate_slots, maxConsecutive}) {\n  companies = processCompanyExceptions(companies);\n\n  var maxScore = 0;\n  var bestSchedule = null;\n\n  companies = initiateCompanies(companies, candidates);\n  candidates = initiateCandidates(candidates, slots);\n  \n  for (var i=0; i < iterations; i++) {\n    candidates = resetCandidates(candidates);\n    companies = resetCompanies(companies);\n    \n    var schedule = new Schedule(candidates, companies, slots, candidate_slots, maxConsecutive);\n\n    var scoreObject = schedule.score();\n\n    // need these for the company interview schedules (schedule.row)\n    // (only names are stored in these spots, not objects)\n    var decGradCandidateNames = getDecemberGradNames(candidates);\n\n    // need to add tags for output\n    candidates = addDecemberGradTag(candidates);\n\n    var data = _.map(schedule.schedule, function(row, i) {\n      return {\n        company: companies[i].name,\n        preferences: companies[i].topPreferences, \n        interviews: addTag(row, decGradCandidateNames, '?decGrad'),\n        maxScore: companies[i].maxScore,\n        score: companies[i].companyScore,\n        percentageOfMax: companies[i].percentageOfMax,\n        adjScore: companies[i].adjScore\n      };\n    });\n\n    self.postMessage(i+1);\n\n    if (scoreObject.score > maxScore) {\n      i=0;\n      maxScore = scoreObject.score;\n\n      var enc = new TextEncoder(\"utf-8\");\n      var dataObj = {\n        score: scoreObject.score,\n        adjScore: scoreObject.adjScore,\n        avgPercent: scoreObject.avgPercent,\n        data: data,\n        candidates: candidates,\n        companies: companies,\n        schedule: schedule.schedule,\n        maxConsecutive: maxConsecutive\n      };\n      var arrBuf = enc.encode(JSON.stringify(dataObj)).buffer;\n      self.postMessage({aTopic: 'newMax', aBuf: arrBuf}, [arrBuf]);\n\n      bestSchedule = schedule;\n    }\n  }\n\n  close();\n}\n\nfunction populateCandidates({iterations, companies, candidates, slots, candidate_slots, schedule, newCompanies, newCandidates, maxConsecutive}) {\n  candidates = newCandidates;\n  companies = newCompanies;\n  _.each(candidates, (candidate) => {\n    candidate.name = trimName(candidate.name);\n  });\n\n  var bestSchedule = new Schedule(candidates, companies, slots, candidate_slots, maxConsecutive, schedule);\n  bestSchedule.populateCandidates();\n\n  var decGradCandidateNames = getDecemberGradNames(candidates);\n\n  _.each(companies, function(company) {\n    company.maxScore = calculateMaxScore(company, candidates);\n  });\n\n  var scoreObject = bestSchedule.score();\n\n  bestSchedule.candidates = addDecemberGradTag(bestSchedule.candidates);\n\n  var data = _.map(bestSchedule.schedule, function(row, i) {\n    return {\n      company: companies[i].name,\n      preferences: companies[i].topPreferences,\n      interviews: addTag(row, decGradCandidateNames, '?decGrad'),\n      maxScore: companies[i].maxScore,\n      score: companies[i].companyScore,\n      percentageOfMax: companies[i].percentageOfMax,\n      adjScore: companies[i].adjScore\n    };\n  });\n\n  var enc = new TextEncoder(\"utf-8\");\n  var arrBuf = enc.encode(JSON.stringify({\n    score: scoreObject.score,\n    adjScore: scoreObject.adjScore,\n    avgPercent: scoreObject.avgPercent,\n    candidates: bestSchedule.candidates,\n    companies: bestSchedule.companies,\n    schedule: bestSchedule.schedule,\n    data: data})).buffer;\n  self.postMessage({aTopic: 'populated', aBuf: arrBuf}, [arrBuf]);\n\n  close();\n}\n\nfunction initiateCompanies(companies, candidates) {\n  _.each(companies, function(company) {\n    company.maxScore = calculateMaxScore(company, candidates);\n    company.percentageOfMax = 0;\n    company.companyScore = 0;\n    company.adjScore = 0;\n    company.topPreferences = [];\n    company = determineDecemberGrad(company, false);\n  });\n  return companies;\n}\n\nfunction resetCompanies(companies) {\n  _.each(companies, function(company) {\n      company.percentageOfMax = 0;\n      company.companyScore = 0;\n      company.adjScore = 0;\n      company.topPreferences = [];\n  });\n  return companies;\n}\n\nfunction initiateCandidates(candidates, slots) {\n  _.each(candidates, function(candidate) {\n    candidate.repeats = '';\n    candidate.schedule = new Array(slots);\n    candidate = determineDecemberGrad(candidate);\n  })\n  return candidates;\n}\n\nfunction resetCandidates(candidates) {\n  _.each(candidates, function(candidate) {\n      candidate.count = 0;\n      candidate.repeats = '';\n      candidate.name = trimName(candidate.name);\n      for (var index=0; index<candidate.schedule.length; index++) {\n        candidate.schedule[index] = null;\n      }\n  });\n  return candidates;\n}\n\nfunction calculateMaxScore(company, candidates) {\n  var maxScore = 0;\n  var counter = 0;\n\n  for (var i=0; i < company.preferences.length; i++) {\n    if (_.findWhere(candidates, {name: company.preferences[i]})) {\n      // Fixme: might not always want this to be out of 20\n      maxScore += (20 - i);\n      counter++;\n    }\n    if (counter == 8) break;\n  }\n  return maxScore;\n}\n\nfunction determineDecemberGrad(object, trim = true) {\n  if (isDecemberGrad(object.name)) {\n    object.decGrad = true;\n  } else {\n    object.decGrad = false;\n  }\n  if (trim) object.name = trimName(object.name);\n  \n  return object;\n}\n\nfunction isDecemberGrad(name) {\n  return indexOf(name, '?') !== -1;\n}\n\nfunction trimName(name) {\n  var pos = indexOf(name, '?');\n  if (pos !== -1) {\n    return name.slice(0, pos);\n  }\n  return name;\n}\n\nfunction indexOf(str, findChar) {\n  for (var i=0; i < str.length; i++) {\n    if (str[i] === findChar) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction addDecemberGradTag(objectList) {\n  for (var i=0; i < objectList.length; i++) {\n    if (objectList[i].decGrad) {\n      var origString = objectList[i].name;\n      objectList[i].name = origString.concat('?decGrad');\n    }\n  }\n  return objectList;\n}\n\nfunction addTag(listToBeTagged, shouldBeTaggedList, strToAdd) {\n  let taggedList = [];\n  for (var i = 0; i < listToBeTagged.length; i++) {\n    if (_.contains(shouldBeTaggedList, listToBeTagged[i])) {\n      taggedList.push(listToBeTagged[i].concat(strToAdd));\n    } else {\n      taggedList.push(listToBeTagged[i]);\n    }\n  }\n  return taggedList;\n}\n\nfunction getDecemberGradNames(listOfObjects) {\n  let finalList = [];\n  for (var i = 0; i < listOfObjects.length; i++) {\n    if (listOfObjects[i].decGrad) {\n      finalList.push(listOfObjects[i].name);\n    }\n  }\n  return finalList;\n}\n\nfunction processCompanyExceptions(companyList) {\n  var finalCompanyList = [];\n  for (var i = 0; i < companyList.length; i=i+2) {\n    var newCompany = {};\n    newCompany.name = companyList[i].name;\n    newCompany.preferences = companyList[i].preferences;\n\n    var exceptionList = [];\n    var companyExceptionList = companyList[i+1].preferences;\n    for (var index=0; index < companyExceptionList.length; index++) {\n      if (companyExceptionList[index] !== '') {\n        exceptionList.push(companyExceptionList[index]);\n      }\n    }\n    newCompany.exceptions = exceptionList;\n    finalCompanyList.push(newCompany);\n  }\n  return finalCompanyList;\n}","function Schedule(candidates, companies, slots, candidate_slots, maxConsecutive, schedule) {\n  var self = this;\n\n  self.candidates = candidates;\n  self.companies = companies;\n  self.slots = slots;\n  self.candidate_slots = candidate_slots;\n  self.maxConsecutive = maxConsecutive;\n\n  if (schedule) {\n    self.schedule = schedule;\n    return;\n  }\n\n  var schedule = new Array(companies.length);\n  for (var i = 0; i < companies.length; i++) {\n    schedule[i] = new Array(slots);\n  }\n\n  // create randomized list of indexes we can use to get a random company\n  var companyIndexes = _.shuffle(_.range(companies.length));\n  // create randomized list of indexes we can use to get a random interview slot\n  var slotIndexes = _.shuffle(_.range(slots));\n\n  // While not finished, let's loop\n  var finished = false;\n  var breakout = false;\n  while(!finished) {\n  \n    finished = true;\n\n    // Shuffle the company indexes again\n    companyIndexes = _.shuffle(companyIndexes);\n\n    // Loop through the randomized companies\n    for (var scheduleIndex=0; scheduleIndex < companies.length; scheduleIndex++) {\n\n      var companyIndex = companyIndexes[scheduleIndex];\n      var company = companies[companyIndex];\n\n      // Get the preference list for current company\n      var preferences = company.preferences;\n\n      // Shuffle the slot indexes again\n      slotIndexes = _.shuffle(slotIndexes);\n\n      // Loop through the randomized slot indexes\n      for (var index = 0; index < slots; index++) {\n\n        var slotIndex = slotIndexes[index];\n\n        // if schedule[company][slot] is null\n        if (_.isEmpty(schedule[companyIndex][slotIndex])) {\n\n          // Loop through the preference list in order\n          for (var counter = 0; counter < preferences.length; counter++) {\n            // Verify current candidate has been given an interview\n            var candidate = _.findWhere(candidates, { name: preferences[counter] });\n\n            if (!candidate) continue;\n\n            // Verify current candidate has < max interviews\n            if (candidate.count < candidate_slots) {\n\n              // Verify only companies that want a december grad get one\n              if (candidate.decGrad && company.decGrad) {\n                var success = scheduleCandidate(schedule, companyIndex, slotIndex, candidate, company, self.maxConsecutive, counter);\n\n                if (success) {\n                  finished = false;\n                  breakout = true;\n                  break;\n                }\n              } else if (candidate.decGrad && !company.decGrad) {\n                if (!_.contains(company.exceptions, candidate.name)) continue;\n                var success = scheduleCandidate(schedule, companyIndex, slotIndex, candidate, company, self.maxConsecutive, counter);\n\n                if (success) {\n                  finished = false;\n                  breakout = true;\n                  break;\n                }\n              } else {\n                var success = scheduleCandidate(schedule, companyIndex, slotIndex, candidate, company, self.maxConsecutive, counter);\n\n                if (success) {\n                  finished = false;\n                  breakout = true;\n                  break;\n                }\n              }\n            }\n          }\n          if (breakout) {\n            breakout = false;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  self.schedule = schedule;\n}\n\nfunction scheduleCandidate(schedule, companyIndex, slotIndex, candidate, company, maxConsecutive, preferenceOrder) {\n  // Verify current candidate is not already scheduled for that timeslot\n  if (isValidAssignment(schedule, companyIndex, slotIndex, candidate, company.name, maxConsecutive)) {\n    schedule[companyIndex][slotIndex] = candidate.name;\n    candidate.count++;\n    candidate.schedule[slotIndex] = company.name;\n    repeatCheck(candidate);\n\n    // company got one of their top 2 preferences\n    // (nice-to-have from Karyn)\n    if (preferenceOrder < 2) {\n      company.topPreferences.push(preferenceOrder+1);\n    }\n    return true\n  }\n  return false\n}\n\nfunction isValidAssignment(schedule, companyIndex, slotIndex, candidate, companyName, maxConsecutive) {\n  if (_.contains(schedule[companyIndex], candidate.name)) return false;\n  if (_.contains(candidate.schedule, companyName)) return false;\n  if (candidate.schedule[slotIndex] !== null) return false;\n\n  var tempList = deepCopyArray(candidate.schedule);\n  tempList[slotIndex] = candidate.name;\n  var highestRepeat = 0;\n  var repeatCount = 0;\n  for (var i=0; i<tempList.length; i++) {\n    if (tempList[i] !== null) {\n      repeatCount++;\n      if (repeatCount > highestRepeat) highestRepeat = repeatCount;\n    } else { // interview slot is empty\n      repeatCount = 0;\n    }\n  }\n  if (highestRepeat > maxConsecutive) return false;\n\n  return true;\n}\n\nfunction repeatCheck(candidate) {\n  var highestRepeat = 0;\n  var repeatCount = 0;\n  for (var i = 0; i < candidate.schedule.length; i++) {\n    if (candidate.schedule[i] !== null) {\n      repeatCount++;\n      if (repeatCount > highestRepeat) highestRepeat = repeatCount;\n    } else { // interview slot is empty\n      repeatCount = 0;\n    }\n  }\n\n  if (highestRepeat > 2) {\n    candidate.repeats = `${highestRepeat} consecutive`;\n  }\n}\n\nfunction deepCopyArrayOfObjects(arrayOfObjects) {\n  var arrayCopy = [];\n  _.each(arrayOfObjects, function(object, iter) {\n    var objectCopy = {};\n    objectCopy.count = object.count;\n    objectCopy.decGrad = object.decGrad;\n    objectCopy.name = object.name;\n    objectCopy.repeats = object.repeats;\n    objectCopy.schedule = [];\n    for (var i=0; i < object.schedule.length; i++) {\n      objectCopy.schedule.push(object.schedule[i]);\n    }\n    arrayCopy.push(objectCopy);\n  });\n  return arrayCopy;\n}\n\nfunction deepCopyArray(array) {\n  var tempArray = [];\n  _.each(array, (value) => {\n    tempArray.push(value);\n  });\n  return tempArray;\n}\n\nSchedule.prototype = {};\nSchedule.prototype.constructor = Schedule;\n\nSchedule.prototype.score = function(){\n  var self = this;\n  var totalScore = 0;\n  var totalPercentage = 0;\n  var totalAdjScore = 0;\n  for (var company = 0; company < self.companies.length; company++) {\n    var companyScore = 0;\n    var current = self.companies[company];\n    var preferences = current.preferences;\n\n    for (var slot = 0; slot < self.slots; slot++) {\n      var candidate = self.schedule[company][slot];\n      if (_.contains(preferences, candidate)) {\n        // Fixme: might not always want this to be out of 20\n        companyScore += 20 - _.indexOf(preferences, candidate);\n      }\n    }\n    current.companyScore = companyScore;\n    current.percentageOfMax = Number((companyScore / current.maxScore).toFixed(4));\n    current.adjScore = Number((companyScore * current.percentageOfMax).toFixed(2));\n\n    totalScore += companyScore;\n    totalAdjScore += current.adjScore;\n    totalPercentage += current.percentageOfMax;\n  }\n\n  var avgPercent = Number((totalPercentage / self.companies.length).toFixed(4));\n\n  return {\n    score: totalScore,\n    adjScore: Number(totalAdjScore.toFixed(0)),\n    avgPercent: avgPercent\n  }\n};\n\nSchedule.prototype.populateCandidates = function(){\n  var self = this;\n  var originalCandidates = deepCopyArrayOfObjects(self.candidates);\n\n  var finished = false;\n\n  var counter = 0;\n  while(!finished && counter < 10000) {\n    ++counter;\n    self.candidates = deepCopyArrayOfObjects(originalCandidates);\n\n    // create randomized list of indexes we can use to get a random company\n    var companyIndexes = _.shuffle(_.range(self.companies.length));\n\n    var remaining = [];\n    _.each(self.candidates, function(candidate) {\n      for (var i=candidate.count; i < self.candidate_slots; i++) {\n        remaining.push(candidate.name);\n      }\n    });\n\n    var schedule = JSON.parse(JSON.stringify(self.schedule));\n\n    finished = true;\n\n    // Loop through the randomized companies\n    for (var scheduleIndex=0; scheduleIndex < self.companies.length; scheduleIndex++) {\n\n      var companyIndex = companyIndexes[scheduleIndex];\n      var company = self.companies[companyIndex];\n\n      // Loop through the indexes in order\n      for (var slotIndex = 0; slotIndex < self.slots; slotIndex++) {\n\n        // if schedule[company][slot] is null\n        if (_.isEmpty(schedule[companyIndex][slotIndex])) {\n\n          var index;\n          var count = remaining.length;\n          for (var index=0; index < count; index++) {\n            var candidate = _.findWhere(self.candidates, { name: remaining[index] });\n            \n            if (candidate.decGrad && company.decGrad) {\n              if (isValidAssignment(schedule, companyIndex, slotIndex, candidate, company.name, self.maxConsecutive)) {\n                schedule[companyIndex][slotIndex] = candidate.name;\n                candidate.schedule[slotIndex] = company.name;\n                candidate.count++;\n                repeatCheck(candidate);\n                remaining.splice(index, 1);\n                break;\n              }\n            } else if (candidate.decGrad && !company.decGrad) {\n              if (!_.contains(company.exceptions, candidate.name)) continue;\n\n              // Is candidate on company's exception list?\n              if (isValidAssignment(schedule, companyIndex, slotIndex, candidate, company.name, self.maxConsecutive)) {\n                schedule[companyIndex][slotIndex] = candidate.name;\n                candidate.schedule[slotIndex] = company.name;\n                candidate.count++;\n                repeatCheck(candidate);\n                remaining.splice(index, 1);\n                break;\n              }\n            } else {\n              if (isValidAssignment(schedule, companyIndex, slotIndex, candidate, company.name, self.maxConsecutive)) {\n                schedule[companyIndex][slotIndex] = candidate.name;\n                candidate.schedule[slotIndex] = company.name;\n                candidate.count++;\n                repeatCheck(candidate);\n                remaining.splice(index, 1);\n                break;\n              }\n            }\n          }\n          if (index === count) {\n  \t\t\t\t  finished = false;\n  \t\t\t\t}\n        }\n      }\n    }\n    if (finished) {\n      if (!self.validateInterviewCounts()) finished = false;\n    }\n  }\n  self.schedule = schedule;\n};\n\nSchedule.prototype.validateInterviewCounts = function(){ return true; };\n\nmodule.exports = Schedule;\n"],"sourceRoot":""}